# AIC boosting function test direct

boostic_forecast = function(Y_or, Y, X, v, h, ratio_start = 0.8, Mstop = 3500) {
  n_tot <- length(Y)
  n_out <- ceiling(n_tot - ratio_start*n_tot)
  ind_out <- seq(to = n_tot, by = 1, length = n_out)
  Y_predicted = c(Y_or[ind_out[1]])
  varimp_df = data.frame(rep(0, (ncol(X)+1)))
  selected_var = c()
  for(i in 1:n_out){
    ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
    x_reg <- X[head(ind_in,-1),] # x independent t = 1, ..., T.in-h
    x0_reg <- matrix(X[tail(ind_in,1),], nrow = 1)
    
      # expanding window
      y_dep <- append(Y[tail(ind_in,-h)], y_extra)
      y_reg <- as.matrix(y_dep)
      # finding m*
      model_1 = glmboost(y_reg ~ ., data = x_reg,
                         family = Gaussian(),
                         control = boost_control(mstop = Mstop, nu = v),
                         center = T)
      AIC = AIC(model_1, method = "corrected" , df = "actset")
      x0_reg_df = data.frame(t(data.frame(unlist(x0_reg))))
      colnames(x0_reg_df) = colnames(x_reg)
      y_predicted = unname(predict(model_1[mstop(AIC)], newdata = x0_reg_df,
                                   type = "response")[1,1])
      cat("Selected M is: ", mstop(AIC), "\n")
      # visualizing selected predictors varimp
      varimp_df_partial = data.frame(varimp(model_1))
      sum_reduction = sum(varimp_df_partial[,1])
      varimp_partial = varimp_df_partial[,1]/sum_reduction
      varimp_df = cbind(varimp_df, varimp_partial)
      # visualizing selected predictors frequency
      selected_var = append(selected_var, list(model_1$xselect()))
      # output
      y_extra = append(y_extra, y_predicted)
    Y_predicted = append(Y_predicted, Y_or[(ind_out[1]+i-(h))] + sum(y_extra))
    print(i/n_out)
  }
  results <- list(forecast = Y_predicted,
                  varimp = varimp_df[,-1],
                  selected = selected_var
  )
  return(results)
}