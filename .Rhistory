bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
for (i in 1:1) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:1) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- sqrt(mean((xt4[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt[tl] - yt[tl])^2)) /
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt3[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt2[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt5[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt6[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt7[tl] - yt[tl])^2) )/
sqrt(  mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
row_names = c(row_names,  as.character(iconv(data_test$vartitle)))
row.names(all_cases[[h]][i,]) = as.character(iconv(data_test$vartitle))
}
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Set1", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(row_names[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', 'BSpline*', "TSBoost", 'TSBoost*','Tree')))
}
row_names
myplots <- vector('list', 140)
for(i in 1:140){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all_cases
plot_data(index_out = i, all_cases)
plot_data(index_out = i, all_cases)
plot_data(index_out = i, all_cases)
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Set1", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(row_names[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear",
'BSpline', "TSBoost")))
}
myplots <- vector('list', 140)
for(i in 1:140){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all_cases
create_df(all_cases,1,12)
create_df(all_cases,1,1)
create_df(all_cases,1,12)
create_df(all_cases,1,3)
M <- 300
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
row_names <-  c()
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
for (i in 1:1) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- sqrt(mean((xt4[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt[tl] - yt[tl])^2)) /
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt3[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt2[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt5[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt6[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt7[tl] - yt[tl])^2) )/
sqrt(  mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
row_names = c(row_names,  as.character(iconv(data_test$vartitle)))
row.names(all_cases[[h]][i,]) = as.character(iconv(data_test$vartitle))
}
}
all_cases
M <- 300
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
row_names <-  c()
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
for (i in 1:12) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- sqrt(mean((xt4[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt[tl] - yt[tl])^2)) /
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt3[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt2[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt5[tl] - yt[tl])^2)) /
sqrt( mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt6[tl] - yt[tl])^2) )/
sqrt(mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- sqrt(mean((xt7[tl] - yt[tl])^2) )/
sqrt(  mean((yt[tl] - xt[tl])^2))
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
row_names = c(row_names,  as.character(iconv(data_test$vartitle)))
row.names(all_cases[[h]][i,]) = as.character(iconv(data_test$vartitle))
}
}
row.names(all_cases[[1]]) <-  row_names
clipr::write_clip(round(all_cases[[1]]),3)
#### All the plots
create_df = function (data, index, h){
result = data[[h]][index,]
if(h>1){
for( i in 2:h){
result = rbind(result, data[[i]][index,])
}
}
h = 1:h
return(cbind(result, h))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Set1", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(row_names[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear",
'BSpline', "TSBoost")))
}
myplots <- vector('list', 140)
for(i in 1:140){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all_cases
### Average R² for out of sample forecasts. # 3 different cases, R² min = 0 and min = .1
M <- 300
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
for (i in 1:12) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- 1 - mean((xt4[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt3[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt2[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt5[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt6[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt7[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
}
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Set1", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(row_names[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear",
'BSpline', "TSBoost")))
}
myplots <- vector('list', 140)
for(i in 1:140){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 4)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(row_names[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost")))
}
myplots <- vector('list', 140)
for(i in 1:140){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots3", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all_cases
create_df(all_cases, 1, 12)
create_df(all_cases, 1, 12)
temp = create_df(all_cases, 1, 12)
temp
temp[,'linear']
(temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline'])
sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
plots_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data, i, 12)
condition = sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
if(condition>=10){
vector = c(vector, i)
}
}
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data, i, 12)
condition = sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
if(condition>=10){
vector = c(vector, i)
}
}
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data, i, 12)
condition = sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
if(condition>=10){
vector = c(vector, i)
}
}
return(vector)
}
which_splines_superior(all_cases)
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
if(condition>=10){
vector = c(vector, i)
}
}
return(vector)
}
which_splines_superior(all_cases)
sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
temp <- create_df(data = data_out, 2, 12)
temp <- create_df(data = all_cases, 2, 12)
sum((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
all_cases
which_splines_superior(all_cases)
cut = which_splines_superior(all_cases)
cut = which_splines_superior(all_cases)
myplots <- vector('list', length(cut))
cut = which_splines_superior(all_cases)
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
ggsave(temp_plot, path="plots4", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
& ((temp[,'bols'] < temp[,'tsboost']) | (temp[,'bols'] < temp[,'bspline'])) )
if(condition>=10){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cut
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tsboost']) & (temp[,'linear'] < temp[,'bspline']))
& ((temp[,'bols'] < temp[,'tsboost']) & (temp[,'bols'] < temp[,'bspline'])) )
if(condition>=10){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cut
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
ggsave(temp_plot, path="plots5", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
cut = which_splines_superior(all_cases)
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
ggsave(temp_plot, path="plots5", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tsboost']) | (temp[,'linear'] < temp[,'bspline']))
& ((temp[,'bols'] < temp[,'tsboost']) | (temp[,'bols'] < temp[,'bspline'])) )
if(condition>=10){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cut = which_splines_superior(all_cases)
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
ggsave(temp_plot, path="plots6", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
cut
x=10
x
x = 'olá, tudo bem?'
x
x = c(1,2,3,4,5)
x
y = c(1,0,3,13,-5)
plot(x,y)
plot.ts(x,y)
View(all_cases[[1]])
dataset
x
x=10
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
x = x + 1
dataset
dataset$data
dataset$metadados$name
dataset$metadados$source
dataset$metadados$sourceurl
dataset$data
