geom_line(aes(y = bspline, color = col[1])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[1])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[1])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost", "Tree")))
}
cut = which_splines_superior(all_cases)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 5)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[5])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost", "Tree")))
}
cut = which_splines_superior(all_cases)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
cut
ggarrange(myplots[[6]],myplots[[7]],
ncol = 2, nrow=1, common.legend = TRUE, legend="bottom")
ggarrange(myplots[[6]],myplots[[7]],
ncol = 1, nrow=2, common.legend = TRUE, legend="bottom")
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
#  geom_line(aes(y = bspline, color = col[3])) +
#   geom_point(aes(y = bspline), shape = 21, colour = "black") +
#   geom_line(aes(y = tsboost, color = col[4])) +
#   geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[3])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
#'BSpline', "TSBoost",
"Tree")))
}
cut = which_splines_superior(all_cases)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots2", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
cut
ggarrange(myplots[[3]],myplots[[6]], myplots[[7]],myplots[[8]],
ncol = 2, nrow=2, common.legend = TRUE, legend="bottom")
require(mboost)
require(R.matlab)
require(forecast)
require(sandwich)
require(gridExtra)
library(ggpubr)
library(afmtools)
library(readxl)
library(dplyr)
library(readr)
# data <- readMat("FRED.mat")
source("helper_functions_analysis.R")
##
library(ggplot2)
library(ggthemes)
library(paletteer)
all_cases
all_cases
bols_aic
all_cases
### calculation of all cases for AIC methods
M <- 300
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
for (i in 1:12) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
i
filenames
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases <- list()
a = filenames[1]
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
i=1
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
data_test
filenames[i]
filenames <- list.files(paste("IPEAtests2", M, "/", sep = ""))
filenames
M
### calculation of all cases for AIC methods
M <- 300
filenames <- list.files(paste("/tests/IPEAtests2", M, "/", sep = ""))
filenames
list.files(paste("/tests/IPEAtests2", M, "/", sep = ""))
list.files(paste("/tests/IPEAtests2", M, "/", sep = ""))
list.files(paste("/tests/IPEAtests2", M, "/", sep = ""))
list.files(paste("/tests/IPEAtests2", M, "/", sep = ""))
paste("/tests/IPEAtests2", M, "/", sep = "")
list.files(paste("tests/IPEAtests2", M, "/", sep = ""))
filenames <- list.files(paste("tests/IPEAtests2", M, "/", sep = ""))
data_test <- readMat(paste("IPEAtests2", M, "/", filenames[i], sep = ""))
paste("IPEAtests2", M, "/", filenames[i], sep = "")
data_test <- readMat(paste("tests/IPEAtests2", M, "/", filenames[i], sep = ""))
data_test
M <- 300
filenames <- list.files(paste("tests/IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases_aic <- list()
for (i in 1:12) {
all_cases_aic[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("tests/IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred.aic[h, ] # tsboost
xt3 <- data_test$bspline.pred.aic[h, ] # bspline
xt4 <- data_test$bols.pred.aic[h, ] # bols
xt5 <- data_test$bspline.noextra.pred.aic[h,]
xt6 <- data_test$tsboost.noextra.pred.aic[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- 1 - mean((xt4[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt3[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt2[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt5[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt6[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
}
}
M <- 300
filenames <- list.files(paste("tests/IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
tree  <- rep(0, 140)
all_cases_aic <- list()
for (i in 1:12) {
all_cases_aic[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
filenames
h
M <- 300
filenames <- list.files(paste("tests/IPEAtests2", M, "/", sep = ""))
linear <- rep(0, 140)
bols <- rep(0, 140)
bspline <- rep(0, 140)
tsboost <- rep(0, 140)
bspline2 <- rep(0, 140)
tsboost2 <- rep(0, 140)
all_cases_aic <- list()
for (i in 1:12) {
all_cases_aic[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("tests/IPEAtests2", M, "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred.aic[h, ] # tsboost
xt3 <- data_test$bspline.pred.aic[h, ] # bspline
xt4 <- data_test$bols.pred.aic[h, ] # bols
xt5 <- data_test$bspline.noextra.pred.aic[h,]
xt6 <- data_test$tsboost.noextra.pred.aic[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- 1 - mean((xt4[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt3[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt2[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt5[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt6[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases_aic[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
}
}
all_cases_aic
#### All the plots
create_df = function (data, index, h){
result = data[[h]][index,]
if(h>1){
for( i in 2:h){
result = rbind(result, data[[i]][index,])
}
}
h = 1:h
return(cbind(result, h))
}
#### All the plots
create_df = function (data, index, h){
result = data[[h]][index,]
if(h>1){
for( i in 2:h){
result = rbind(result, data[[i]][index,])
}
}
h = 1:h
return(cbind(result, h))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 4)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
# geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost")))
#"Tree"
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:140){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'bspline']) & (temp[,'bols'] < temp[,'bspline']))
& ((temp[,'linear'] < temp[,'tsboost']) & (temp[,'bols'] < temp[,'tsboost'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cut = which_splines_superior(all_cases_aic)
cut
cut = which_splines_superior(all_cases_aic)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots3", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
cut = which_splines_superior(all_cases_aic)
myplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases_aic)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plots3", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all <- data.frame(
"linear" = rep(0, 12),
"bols" = rep(0, 12),
"bspline" = rep(0, 12),
"tsboost" = rep(0, 12),
"bspline2" = rep(0, 12),
"tsboost2" = rep(0, 12)
)
all1 <- all
spl <- all
spl1 <- all
lin <- all
lin1 <- all
N0 = rep(140,12)
N1 = c()
for (i in 1:12) {
base = all_cases_aic[[i]]
all[i, ] <- sapply(base, mean)
all1[i, ] <- sapply(base, mean_01)
N1 = c(N1, sum(base['tsboost']>.1))
}
N2 = c()
N3 = c()
N4 = c()
N5 = c()
for (i in 1:12) {
## Any of the splines method is best of linear cases
base = all_cases_aic[[i]]
cut = base['linear'] < base['tsboost'] | base['linear'] < base['bspline']
spl[i,'linear'] = mean(base[cut,'linear'])
spl[i,'bols'] = mean(base[cut,'bols'])
spl[i,'bspline'] = mean(base[cut,'bspline'])
spl[i,'tsboost'] = mean(base[cut,'tsboost'])
spl[i,'bspline2'] = mean(base[cut,'bspline2'])
spl[i,'tsboost2'] = mean(base[cut,'tsboost2'])
spl[i,'tree'] = mean(base[cut,'tree'])
N2 = c(N2, sum(cut))
cut = (base['linear'] < base['tsboost'] | base['linear'] < base['bspline']) & base['linear'] >=0.1 & base['bols'] >=0.1 & base['bspline'] >=0.1 & base['tsboost'] >=0.1
spl1[i,'linear'] = mean(base[cut,'linear'])
spl1[i,'bols'] = mean(base[cut,'bols'])
spl1[i,'bspline'] = mean(base[cut,'bspline'])
spl1[i,'tsboost'] = mean(base[cut,'tsboost'])
spl1[i,'bspline2'] = mean(base[cut,'bspline2'])
spl1[i,'tsboost2'] = mean(base[cut,'tsboost2'])
spl1[i,'tree'] = mean(base[cut,'tree'])
N3 = c(N3, sum(cut))
## Linear methods are better
cut = !(base['linear'] < base['tsboost'] | base['linear'] < base['bspline'])
lin[i,'linear'] = mean(base[cut,'linear'])
lin[i,'bols'] = mean(base[cut,'bols'])
lin[i,'bspline'] = mean(base[cut,'bspline'])
lin[i,'tsboost'] = mean(base[cut,'tsboost'])
lin[i,'bspline2'] = mean(base[cut,'bspline2'])
lin[i,'tsboost2'] = mean(base[cut,'tsboost2'])
lin[i,'tree'] = mean(base[cut,'tree'])
N4 = c(N4, sum(cut))
cut = !(base['linear'] < base['tsboost'] | base['linear'] < base['bspline']) & base['linear'] >=0.1 & base['bols'] >=0.1 & base['bspline'] >=0.1 & base['tsboost'] >=0.1
lin1[i,'linear'] = mean(base[cut,'linear'])
lin1[i,'bols'] = mean(base[cut,'bols'])
lin1[i,'bspline'] = mean(base[cut,'bspline'])
lin1[i,'tsboost'] = mean(base[cut,'tsboost'])
lin1[i,'bspline2'] = mean(base[cut,'bspline2'])
lin1[i,'tsboost2'] = mean(base[cut,'tsboost2'])
lin1[i,'tree'] = mean(base[cut,'tree'])
N5 = c(N5, sum(cut))
}
warnings()
all <- data.frame(
"linear" = rep(0, 12),
"bols" = rep(0, 12),
"bspline" = rep(0, 12),
"tsboost" = rep(0, 12),
"bspline2" = rep(0, 12),
"tsboost2" = rep(0, 12)
)
all1 <- all
spl <- all
spl1 <- all
lin <- all
lin1 <- all
N0 = rep(140,12)
N1 = c()
for (i in 1:12) {
base = all_cases_aic[[i]]
all[i, ] <- sapply(base, mean)
all1[i, ] <- sapply(base, mean_01)
N1 = c(N1, sum(base['tsboost']>.1))
}
N2 = c()
N3 = c()
N4 = c()
N5 = c()
for (i in 1:12) {
## Any of the splines method is best of linear cases
base = all_cases_aic[[i]]
cut = base['linear'] < base['tsboost'] | base['linear'] < base['bspline']
spl[i,'linear'] = mean(base[cut,'linear'])
spl[i,'bols'] = mean(base[cut,'bols'])
spl[i,'bspline'] = mean(base[cut,'bspline'])
spl[i,'tsboost'] = mean(base[cut,'tsboost'])
spl[i,'bspline2'] = mean(base[cut,'bspline2'])
spl[i,'tsboost2'] = mean(base[cut,'tsboost2'])
N2 = c(N2, sum(cut))
cut = (base['linear'] < base['tsboost'] | base['linear'] < base['bspline']) & base['linear'] >=0.1 & base['bols'] >=0.1 & base['bspline'] >=0.1 & base['tsboost'] >=0.1
spl1[i,'linear'] = mean(base[cut,'linear'])
spl1[i,'bols'] = mean(base[cut,'bols'])
spl1[i,'bspline'] = mean(base[cut,'bspline'])
spl1[i,'tsboost'] = mean(base[cut,'tsboost'])
spl1[i,'bspline2'] = mean(base[cut,'bspline2'])
spl1[i,'tsboost2'] = mean(base[cut,'tsboost2'])
N3 = c(N3, sum(cut))
## Linear methods are better
cut = !(base['linear'] < base['tsboost'] | base['linear'] < base['bspline'])
lin[i,'linear'] = mean(base[cut,'linear'])
lin[i,'bols'] = mean(base[cut,'bols'])
lin[i,'bspline'] = mean(base[cut,'bspline'])
lin[i,'tsboost'] = mean(base[cut,'tsboost'])
lin[i,'bspline2'] = mean(base[cut,'bspline2'])
lin[i,'tsboost2'] = mean(base[cut,'tsboost2'])
N4 = c(N4, sum(cut))
cut = !(base['linear'] < base['tsboost'] | base['linear'] < base['bspline']) & base['linear'] >=0.1 & base['bols'] >=0.1 & base['bspline'] >=0.1 & base['tsboost'] >=0.1
lin1[i,'linear'] = mean(base[cut,'linear'])
lin1[i,'bols'] = mean(base[cut,'bols'])
lin1[i,'bspline'] = mean(base[cut,'bspline'])
lin1[i,'tsboost'] = mean(base[cut,'tsboost'])
lin1[i,'bspline2'] = mean(base[cut,'bspline2'])
lin1[i,'tsboost2'] = mean(base[cut,'tsboost2'])
N5 = c(N5, sum(cut))
}
lin
sapply(lin, mean)
sapply(lin1, mean)
clipr::write_clip(t(all))
clipr::write_clip(t(N0))
clipr::write_clip(t(all1))
clipr::write_clip(t(spl))
clipr::write_clip(t(N2))
clipr::write_clip(t(N1))
clipr::write_clip(t(spl1))
clipr::write_clip(t(N3))
clipr::write_clip(t(lin))
clipr::write_clip(t(N4))
clipr::write_clip(t(lin1))
clipr::write_clip(t(N5))
