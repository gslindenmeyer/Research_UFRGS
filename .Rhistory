df = data.frame(lag_1=df)
}
ytp <- tail(yt,-p)
n_tot <- length(ytp)
#n_out <- ceiling(n_tot - ratio*n_tot)
ind_out <- seq(to = n_tot, by = 1, length = n_out)
Y_predicted = c()
data <- cbind(y_reg = ytp, df)
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
x_reg <- data.frame(lag_1=data[ind_in,colnames(df)])
x0_reg <- data.frame(lag_1=data[(ind_out[i]-h+1),colnames(df)])
row.names(x0_reg) <- (ind_out[i]-h+1)
x_reg
x0_reg
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
h=4
df = data.frame(lag_1 = NA, lag_2=NA, lag_3 = NA, lag_4 = NA, lag_5 = NA, lag_6=NA,
lag_7 = NA, lag_8 = NA,lag_9 = NA, lag_10=NA, lag_11 = NA, lag_12 = NA)
df = df[,1:p]
for(i in 1:p){
#  cat((i/p)*100, '%\n')
if(p>1){
df[i:(length(yt)-1),i] <- head(yt,-i)
} else {
df[i:(length(yt)-1)] <- head(yt,-i)
}
}
df <- na.exclude(df, )
rownames(df) <- NULL
if(p==1){
df = data.frame(lag_1=df)
}
ytp <- tail(yt,-p)
n_tot <- length(ytp)
#n_out <- ceiling(n_tot - ratio*n_tot)
ind_out <- seq(to = n_tot, by = 1, length = n_out)
Y_predicted = c()
data <- cbind(y_reg = ytp, df)
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
x_reg <- data.frame(lag_1=data[ind_in,colnames(df)])
x0_reg <- data.frame(lag_1=data[(ind_out[i]-h+1),colnames(df)])
row.names(x0_reg) <- (ind_out[i]-h+1)
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
y_dep
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
x0_reg
p=2
h=2
df = data.frame(lag_1 = NA, lag_2=NA, lag_3 = NA, lag_4 = NA, lag_5 = NA, lag_6=NA,
lag_7 = NA, lag_8 = NA,lag_9 = NA, lag_10=NA, lag_11 = NA, lag_12 = NA)
df = df[,1:p]
for(i in 1:p){
#  cat((i/p)*100, '%\n')
if(p>1){
df[i:(length(yt)-1),i] <- head(yt,-i)
} else {
df[i:(length(yt)-1)] <- head(yt,-i)
}
}
df <- na.exclude(df, )
rownames(df) <- NULL
if(p==1){
df = data.frame(lag_1=df)
}
ytp <- tail(yt,-p)
n_tot <- length(ytp)
#n_out <- ceiling(n_tot - ratio*n_tot)
ind_out <- seq(to = n_tot, by = 1, length = n_out)
Y_predicted = c()
data <- cbind(y_reg = ytp, df)
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
x_reg <- data[ind_in,colnames(df)] # x independent t = 1, ..., T.in-h
x0_reg <- data[(ind_out[i]-h+1),colnames(df)]
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
x0_reg
h
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
x_reg <- data[ind_in,colnames(df)] # x independent t = 1, ..., T.in-h
x0_reg <- data[(ind_out[i]-h+1),colnames(df)]
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
p=1
## xt nao faz nada ainda
df = data.frame(lag_1 = NA, lag_2=NA, lag_3 = NA, lag_4 = NA, lag_5 = NA, lag_6=NA,
lag_7 = NA, lag_8 = NA,lag_9 = NA, lag_10=NA, lag_11 = NA, lag_12 = NA)
df = df[,1:p]
for(i in 1:p){
#  cat((i/p)*100, '%\n')
if(p>1){
df[i:(length(yt)-1),i] <- head(yt,-i)
} else {
df[i:(length(yt)-1)] <- head(yt,-i)
}
}
df <- na.exclude(df, )
rownames(df) <- NULL
if(p==1){
df = data.frame(lag_1=df)
}
ytp <- tail(yt,-p)
n_tot <- length(ytp)
#n_out <- ceiling(n_tot - ratio*n_tot)
ind_out <- seq(to = n_tot, by = 1, length = n_out)
Y_predicted = c()
data <- cbind(y_reg = ytp, df)
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
ind_in
x_reg <- data.frame(lag_1=data[ind_in,colnames(df)])
x0_reg <- data.frame(lag_1=data[(ind_out[i]-h+1),colnames(df)])
row.names(x0_reg) <- (ind_out[i]-h+1)
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
x0_reg
p=2
df = data.frame(lag_1 = NA, lag_2=NA, lag_3 = NA, lag_4 = NA, lag_5 = NA, lag_6=NA,
lag_7 = NA, lag_8 = NA,lag_9 = NA, lag_10=NA, lag_11 = NA, lag_12 = NA)
df = df[,1:p]
for(i in 1:p){
#  cat((i/p)*100, '%\n')
if(p>1){
df[i:(length(yt)-1),i] <- head(yt,-i)
} else {
df[i:(length(yt)-1)] <- head(yt,-i)
}
}
df <- na.exclude(df, )
rownames(df) <- NULL
if(p==1){
df = data.frame(lag_1=df)
}
ytp <- tail(yt,-p)
n_tot <- length(ytp)
#n_out <- ceiling(n_tot - ratio*n_tot)
ind_out <- seq(to = n_tot, by = 1, length = n_out)
Y_predicted = c()
data <- cbind(y_reg = ytp, df)
i
i=1
ind_in <- seq(from = 1, to = ind_out[i] - h, by = 1)
x_reg <- data[ind_in,colnames(df)] # x independent t = 1, ..., T.in-h
x0_reg <- data[(ind_out[i]-h+1),colnames(df)]
x_reg
x0_reg
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2
x_reg <- data[ind_in,colnames(df)] # x independent t = 1, ..., T.in-h
x0_reg <- data[(ind_out[i]-h+1),colnames(df)]
y_dep <- ytp[tail((h-1):(length(ind_in)+h-1),-j)] #ytp[ind_in] #[tail(ind_in,-(h))]
data2
data2 <- as.data.frame(cbind(y_reg = y_dep, x_reg))
data2
x0_reg
rm(list=ls())
require(mboost)
require(forecast)
require(zoo)
source('functions.R')
set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=12, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=6, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=3, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=12, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=12, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
modelo_2 = linear_model(yt=yt2,h=6, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
modelo_2 = linear_model(yt=yt2,h=3, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=1, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=12, n_out = 200)
vetor_dalers = c(vetor_dalers, modelo_1$r2)
}
vetor_dalers
plot(vetor_dalers)
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=1, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=12, n_out = 200)
if(modelo_1$r2 > 0){
x = modelo_1$r2
} else{
x = 0
}
vetor_dalers = c(vetor_dalers, x)
}
plot(vetor_dalers)
plot(x = vetor_dalers, xlab = "R^2")
plot(x = vetor_dalers, xlab = "R^2")
plot(x = vetor_dalers, ylab = "R^2")
plot(x = vetor_dalers, ylab = "R²")
plot(x = vetor_dalers, ylab = "R²")
plot(x = vetor_dalers, ylab = "R²", xlab = 'lag')
plot(x = vetor_dalers, ylab = "R²", xlab = 'h')
rm(list=ls())
require(mboost)
require(forecast)
source('functions.R')
100
20
80
20
p =1
yt=1:100
yt
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1 = linear_model(yt=yt,h=2, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=3, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_1 = linear_model(yt=yt,h=12, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=12, n_out = 200)
ifelse(modelo_1$r2 > 0,x = modelo_1$r2,x = 0)
vetor_dalers = c(vetor_dalers, x)
}
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=12, n_out = 200)
x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
vetor_dalers = c(vetor_dalers, x)
}
plot(x = vetor_dalers, ylab = "R²", xlab = 'h')
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=12, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=1, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=12, n_out = 200)
x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
vetor_dalers = c(vetor_dalers, x)
}
plot(x = vetor_dalers, ylab = "R²", xlab = 'h')
plot(x = vetor_dalers, ylab = "R²", xlab = 'h', ylim = c(0,1))
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt2,h=i, p=12, n_out = 200)
x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
vetor_dalers = c(vetor_dalers, x)
}
plot(x = vetor_dalers, ylab = "R²", xlab = 'h', ylim = c(0,1))
t = 500
yt = array(dim = t)
4:500
AirPassengers
plot(AirPassengers)
modelo = Arima(AirPassengers, c(1,1,0))
modelo
Passageiros_1949_2 = 0.0797 + 0.3065*Passageiros_1949_1
modelo = Arima(AirPassengers, c(1,0,0))
modelo
forecast(modelo, h=1)
plot(forecast(modelo,h=1))
plot(forecast(modelo,h=1:12))
plot(forecast(modelo,h=12))
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
plot.ts(yt)
modelo_1 = linear_model(yt=yt,h=12, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=1, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
for(i in 1:12){
modelo_1 = linear_model(yt=yt2,h=i, p=12, n_out = 200)
x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
vetor_dalers = c(vetor_dalers, x)
}
vetor_dalers = c()
for(i in 1:12){
modelo_1 = linear_model(yt=yt2,h=i, p=12, n_out = 200)
x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
vetor_dalers = c(vetor_dalers, x)
}
plot(x = vetor_dalers, ylab = "R²", xlab = 'h', ylim = c(0,1))
model
lm(c(1,2,3)~c(.3,.5,.3))
a = lm(c(1,2,3)~c(.3,.5,.3))
a
aic(a)
AIC(a)
rm(list=ls())
require(mboost)
require(forecast)
source('functions.R')
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
source('functions.R')
source('functions.R')
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
modelo_1
rm(list=ls())
require(mboost)
require(forecast)
source('functions.R')
#set.seed(2506)
t = 500
yt = array(dim = t) ## Criação do vetor 1 linear
yt[c(1,2,3)] = rnorm(3, mean = 0, sd = 0.01)
for(i in 4:t){
yt[i] = 0.21*yt[i-1] + 0.35*yt[i-2] + 0.17*yt[i-3] + 0.1*rnorm(1, mean = 0, sd = 0.1)
}
yt2 = array(dim = t) ## Criação do vetor 2 não linear
yt2[c(1)] = rnorm(1, mean = 0, sd = 0.25)
for(i in 2:t){
yt2[i] = 0.4*(5-yt2[i-1]^2)/(1+yt2[i-1]^2)+rnorm(1, mean = 0, sd = 0.5)
}
modelo_1 = linear_model(yt=yt,h=1, p=12, n_out = 200)
plot.ts(modelo_1$y_filtered)
lines(modelo_1$y_hat, col ='red')
modelo_1$r2 #0.3979414
modelo_2 = linear_model(yt=yt2,h=1, p=12, n_out=200)
plot.ts(modelo_2$y_filtered)
lines(modelo_2$y_hat, col ='red')
modelo_2$r2 #0.5369995
modelo_1
modelo_1$aic
mean(modelo_1$aic)
for(j in 1:12){
for(i in 1:12){
modelo_1 = linear_model(yt=yt2,h=i, p=j, n_out = 200)
#x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
#vetor_dalers = c(vetor_dalers, x)
df[i,j] <- mean(modelo_1$aic)
}
}
modelo_1 = linear_model(yt=yt2,h=i, p=j, n_out = 200)
df = data.frame(lag_1 = NA, lag_2=NA, lag_3 = NA, lag_4 = NA, lag_5 = NA, lag_6=NA,
lag_7 = NA, lag_8 = NA,lag_9 = NA, lag_10=NA, lag_11 = NA, lag_12 = NA)
for(j in 1:12){
for(i in 1:12){
modelo_1 = linear_model(yt=yt2,h=i, p=j, n_out = 200)
#x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
#vetor_dalers = c(vetor_dalers, x)
df[i,j] <- mean(modelo_1$aic)
}
}
df
which.min(df)
which.min(df)
which.min(mean(df))
(mean(df)
mean(df)
mean(df)
mean(df)
mean(df)
mean(df)
mean(df)
mean(df)
mean(df)
which.min(mean(df))
which.min(mean(df))
df
lapply(df, mean)
which.min(lapply(df, mean))
which.min(lapply(df, mean))
which.min(lapply(df, mean))
which.min(lapply(df, mean))
for(j in 1:12){
for(i in 1:12){
modelo_1 = linear_model(yt=yt,h=i, p=j, n_out = 200)
#x=ifelse(modelo_1$r2 > 0,modelo_1$r2,0)
#vetor_dalers = c(vetor_dalers, x)
df[i,j] <- mean(modelo_1$aic)
}
}
which.min(lapply(df, mean))
