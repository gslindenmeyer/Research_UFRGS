scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
#'BSpline', "TSBoost",
"Tree")))
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:78){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=6){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:78){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:78){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
all_cases
linear <- rep(0, 78)
bols <- rep(0, 78)
bspline <- rep(0, 78)
tsboost <- rep(0, 78)
bspline2 <- rep(0, 78)
tsboost2 <- rep(0, 78)
tree  <- rep(0, 78)
all_cases <- list()
for (i in 1:12) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtestsCOVID_Until2022_M_300", "/", filenames[i], sep = ""))
start <- data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- 1 - mean((xt4[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt3[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt2[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt5[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt6[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt7[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
}
}
codenames <- read_excel("data/code_master2.xlsx",
col_types = c(
"text", "text", "text",
"date", "date", "numeric", "text"
)
)
result <- match(names(data.frame(dataset$data)), codenames$codigo)
names <- pull(read_excel("dados.xlsx", sheet = "Planilha1",
col_names = FALSE))
Series <- names[result]
#### All the plots
create_df = function (data, index, h){
result = data[[h]][index,]
if(h>1){
for( i in 2:h){
result = rbind(result, data[[i]][index,])
}
}
h = 1:h
return(cbind(result, h))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 7)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = bspline2, color = col[4])) +
geom_point(aes(y = bspline2), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tsboost2, color = col[6])) +
geom_point(aes(y = tsboost2), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[8])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', 'BSpline*', "TSBoost", 'TSBoost*','Tree')))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
#  geom_line(aes(y = bspline, color = col[3])) +
#   geom_point(aes(y = bspline), shape = 21, colour = "black") +
#   geom_line(aes(y = tsboost, color = col[4])) +
#   geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[3])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
#'BSpline', "TSBoost",
"Tree")))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 7)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = bspline2, color = col[4])) +
geom_point(aes(y = bspline2), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[5])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tsboost2, color = col[6])) +
geom_point(aes(y = tsboost2), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[8])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ylab("R²") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_calc() +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', 'BSpline*', "TSBoost", 'TSBoost*','Tree')))
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
#  geom_line(aes(y = bspline, color = col[3])) +
#   geom_point(aes(y = bspline), shape = 21, colour = "black") +
#   geom_line(aes(y = tsboost, color = col[4])) +
#   geom_point(aes(y = tsboost), shape = 21, colour = "black") +
geom_line(aes(y = tree, color = col[3])) +
geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
#'BSpline', "TSBoost",
"Tree")))
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:78){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
#  geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
#'BSpline', "TSBoost",
"Tree")))
}
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[i]] <- temp_plot
ggsave(temp_plot, path="plots4", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
which_splines_superior <- function(data_out){
vector = c()
for(i in 1:78){
temp <- create_df(data = data_out, i, 12)
condition = sum( ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree']))
& ((temp[,'linear'] < temp[,'tree']) & (temp[,'bols'] < temp[,'tree'])) )
if(condition>=9){
vector = c(vector, i)
}
}
return(vector)
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
#  geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost",
#"Tree"
)))
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
#  geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost"
#,"Tree"
)))
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 3)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
#geom_line(aes(y = bols, color = col[2])) +
#  geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
#  geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost"
#,"Tree"
)))
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
plot_data = function (index_out, data, h =12) {
df = create_df(data = data, index = index_out, h =12)
col = paletteer_d("RColorBrewer::Paired", 4)
return(plot <- ggplot(data = df, mapping = aes(x = h)) +
geom_line(aes(y = linear, color = col[1]), ) +
geom_point(aes(y = linear), shape = 21, colour = "black") +
geom_line(aes(y = bols, color = col[2])) +
geom_point(aes(y = bols), shape = 21, colour = "black") +
geom_line(aes(y = bspline, color = col[3])) +
geom_point(aes(y = bspline), shape = 21, colour = "black") +
geom_line(aes(y = tsboost, color = col[4])) +
geom_point(aes(y = tsboost), shape = 21, colour = "black") +
# geom_line(aes(y = tree, color = col[3])) +
# geom_point(aes(y = tree), shape = 21, colour = "black") +
ggtitle(Series[index_out]) +
ylim(0, 1) + # scale_y_continuous(labels=as.character(seq(0,1, by=0.1)),breaks=seq(0,1, by=0.1)) +
scale_x_continuous(labels = as.character(df$h), breaks = df$h) +
theme_excel_new() + xlab("h") + ylab("R²") + theme(axis.title=element_text(size=10)) +
scale_colour_manual(values = col,name = "Models", labels = c("Linear", "BOLS",
'BSpline', "TSBoost")))
#"Tree"
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=1
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVID", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
Series
filenames <- list.files("IPEAtestsCOVID_Until2022_M_300")
linear <- rep(0, 78)
bols <- rep(0, 78)
bspline <- rep(0, 78)
tsboost <- rep(0, 78)
bspline2 <- rep(0, 78)
tsboost2 <- rep(0, 78)
tree  <- rep(0, 78)
all_cases <- list()
for (i in 1:12) {
all_cases[[i]] <- data.frame(linear, bols, bspline, tsboost, bspline2, tsboost2, tree)
}
for (h in 1:12) {
for (i in 1:length(filenames)) {
data_test <- readMat(paste("IPEAtestsCOVID_Until2022_M_300", "/", filenames[i], sep = ""))
start <- 289#$data_test$test.data.start[1]
end <- tail(data_test$test.data.end, 1)
xt <- data_test$ar.pred[h, ] # linear
xt2 <- data_test$tsboost.pred[h, ] # tsboost
xt3 <- data_test$bspline.pred[h, ] # bspline
xt4 <- data_test$bols.pred[h, ] # bols
xt5 <- data_test$bspline.noextra.pred[h,]
xt6 <- data_test$tsboost.noextra.pred[h,]
xt7 <- data_test$tree2.pred[h,]
var <- data_test$const.pred[h, ] # for var
yt <- data_test$true.Ytph[h, ] # true value
tl <- start:(end - h)
ind <- 1 - mean((xt4[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bols"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "linear"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt3[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt2[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt5[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "bspline2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt6[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tsboost2"] <- ifelse(ind < 0, 0, ind)
ind <- 1 - mean((xt7[tl] - yt[tl])^2) /
mean((yt[tl] - var[tl])^2)
all_cases[[h]][i, "tree"] <- ifelse(ind < 0, 0, ind)
}
}
data_test$test.data.start[1]
data_test$test.data.start[2]
data_test$test.data.start[6]
data_test$test.data.start[7]
codenames <- read_excel("data/code_master2.xlsx",
col_types = c(
"text", "text", "text",
"date", "date", "numeric", "text"
)
)
result <- match(names(data.frame(dataset$data)), codenames$codigo)
names <- pull(read_excel("dados.xlsx", sheet = "Planilha1",
col_names = FALSE))
Series <- names[result]
#### All the plots
create_df = function (data, index, h){
result = data[[h]][index,]
if(h>1){
for( i in 2:h){
result = rbind(result, data[[i]][index,])
}
}
h = 1:h
return(cbind(result, h))
}
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
cut = which_splines_superior(all_cases)
cutmyplots <- vector('list', length(cut))
k=
for(i in cut){
temp_plot <- plot_data(index_out = i, all_cases)
myplots[[k]] <- temp_plot
k=k+1
ggsave(temp_plot, path="plots\\plotsCOVIDONLY", filename = paste0('plot_', i, '.tiff'), width = 6, height = 4, units = "in")
}
